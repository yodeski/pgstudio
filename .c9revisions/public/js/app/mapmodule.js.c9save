{"ts":1354024257031,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"app.register(\"map-module\", function(sandbox){\r\n    /*\r\n    * @constructor\r\n\t*/\r\n    return {\r\n\r\n\t\tobjSource: {}, //objeto tabla/view\r\n        \r\n\t\tinit: function(){\r\n\t\t\tthis.moduleId = \"MyMap\";\r\n\t\t\tthis.el = sandbox.getElement({ selector:\"#\" + this.moduleId });\r\n            this.Map = {};\r\n            this.theLayers = [];\r\n            this.baseUrl = 'http://{s}.tile.cloudmade.com/{key}/31371/256/{z}/{x}/{y}.png';\r\n            this.MapDir = \"\";\r\n            this.handleLayerEvent();\r\n            this.loadMap(this.baseUrl);\r\n\r\n\t\t},\r\n        \r\n        handleLayerEvent: function() {\r\n            var self = this;\r\n            \r\n            $('body').on('click.map', '[data-control=\"layer\"]', function(e) {\r\n                self.setMSTileOverlay($(this));\r\n                self.getMapFile($(this));\r\n                //self.setOverlay($(this), self.Map.getBounds());\r\n            });   \r\n        },        \r\n        turnOnOffLayer: function(el) {        \r\n           var self = this;\r\n           \r\n           var $this = el,\r\n                id = $this.attr('href');\r\n            \r\n            var tablename = id.replace(/.*(?=#[^\\s]+$)/, '').slice(1);\r\n                \r\n            var $swith = $this.find('span');\r\n            var state = $swith.attr('state');\r\n            if(state==='on') {\r\n                if (self.theLayers[tablename] != undefined) {\r\n                    self.Map.removeLayer(self.theLayers[tablename]);\r\n                };\r\n                $swith.attr('state', 'off');\r\n                $swith.removeClass('text-light');\r\n                $swith.parent().addClass('text-grayed');\r\n                return false;\r\n            }\r\n            else {\r\n                $swith.attr('state', 'on');\r\n                $swith.addClass('text-light');\r\n                $swith.parent().removeClass('text-grayed');\r\n                return true;\r\n            }\r\n            \r\n        },\r\n\r\n        loadMap: function(url){\r\n            var self = this;\r\n            $.get('getMapsDirectory', function (res) {\r\n                self.MapDir = res;\r\n            });\r\n            \r\n            self.Map = L.map('mymap').setView([-34.5767, -58.437], 13);\r\n            var tileLayer = new L.TileLayer(url, {\r\n                attribution: 'Map data &copy; 2011 OpenStreetMap contributors, Imagery &copy; 2012 CloudMade',\r\n                key: 'BC9A493B41014CAABB98F0471D759707'\r\n            });\r\n          \r\n            self.Map.addLayer(tileLayer);\r\n\r\n\t\t},\r\n        setMSTileOverlay: function(el) {\r\n            var self = this;\r\n            \r\n            var turnOn = self.turnOnOffLayer(el);\r\n            if(turnOn) {\r\n                var $this = el,\r\n                    db = $this.attr('DBName'),\r\n                    id = $this.attr('href');\r\n                \r\n                var tablename = id.replace(/.*(?=#[^\\s]+$)/, '').slice(1);\r\n                var urlTemplate = 'http://localhost/cgi-bin/mapserv?';\r\n                urlTemplate += 'map=' + self.MapDir + db + '.map&';\r\n                urlTemplate += 'layers=' + tablename + '&';\r\n                urlTemplate += 'mode=tile&';\r\n                urlTemplate += 'tilemode=gmap&';\r\n                urlTemplate += 'tile={x}+{y}+{z}';\r\n                \r\n                var layer = new L.TileLayer(urlTemplate, {\r\n                    transparent: true,\r\n                    attribution: \"FOSM\"\r\n                });\r\n                self.theLayers[tablename] = layer;\r\n                self.Map.addLayer(layer);\r\n            }\r\n        },\r\n        getMapFile: function(el) {\r\n            var self = this;\r\n            var $this = el,\r\n                db = $this.attr('DBName'),\r\n                id = $this.attr('href');\r\n            \r\n            var tablename = id.replace(/.*(?=#[^\\s]+$)/, '').slice(1);\r\n             \r\n            $.get('getMapFile', {mapfile: tablename }, function (res) {\r\n                var editor = ace.edit(\"editor\");\r\n                editor.commands.addCommand({\r\n                    name: 'saveMap',\r\n                    bindKey: {win: 'Ctrl-S',  mac: 'Command-S'},\r\n                    exec: function(editor) {\r\n                        var text = editor.getValue();\r\n                        self.saveMapFile(tablename, text);\r\n                    }\r\n                });                \r\n                self.setEditorContent(res);              \r\n            }); \r\n        \r\n        },\r\n        saveMapFile: function(filename,text) {\r\n            $.get('saveMapFile', {mapfile: filename, content: text }, function (res) {\r\n                \r\n            });\r\n        },\r\n        setEditorContent: function(content) {\r\n            var editor = ace.edit(\"editor\");\r\n            editor.setValue(content);\r\n            editor.gotoLine(1);               \r\n        },\r\n        setOverlay: function(el, bounds) {\r\n            var self = this;\r\n            \r\n            var $this = el,\r\n                db = $this.attr('DBName'),\r\n                id = $this.attr('href');\r\n            \r\n            var tablename = id.replace(/.*(?=#[^\\s]+$)/, '').slice(1);\r\n            var fieldname = 'gid';\r\n            var boundbox = new L.LatLngBounds(bounds._southWest, bounds._northEast);\r\n            var bbBox = {\r\n                _sWLat: boundbox.getSouthWest().lat,\r\n                _sWLon: boundbox.getSouthWest().lng,\r\n                _nELat: boundbox.getNorthEast().lat,\r\n                _nELon: boundbox.getNorthEast().lng\r\n            };\r\n                    \r\n            $.getJSON(\r\n                '/getGeoJson',\r\n                {_bbBox: bbBox, _tablename: tablename, _fieldname: fieldname},\r\n                function (res) {\r\n                    self.parseLayerResponse(tablename, res)\r\n                });\r\n            //self.setStyle(el);\r\n\r\n        },\r\n        parseLayerResponse:function(layername, features) {\r\n            var self = this;\r\n            if (self.theLayers[layername] != undefined) {\r\n                self.Map.removeLayer(self.theLayers[layername]);\r\n            };\r\n            var myStyle = {\r\n                \"color\": \"#ff7800\",\r\n                \"strokeColor\": \"#0d0\",\r\n                \"stroke-width\":\"1\",\r\n                \"weight\": 1,\r\n                \"opacity\": 0.95\r\n            };\r\n            self.theLayers[layername] = L.geoJson(features.features, {\r\n                style: myStyle\r\n            }).addTo(self.Map);\r\n            /*self.theLayers[layername] = new L.GeoJSON();\r\n            self.theLayers[layername].on('featureparse', function(e) {\r\n                e.layer.setStyle({ color:  '#003300', weight: 2, fill: true, fillColor: '#009933' });\r\n            });\r\n            self.theLayers[layername].addData(features);\r\n            self.Map.addLayer(self.theLayers[layername]);*/\r\n        }\r\n\r\n\t};\r\n});"]],"start1":0,"start2":0,"length1":0,"length2":6716}]],"length":6716}
