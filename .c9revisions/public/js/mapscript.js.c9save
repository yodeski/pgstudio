{"ts":1349485271131,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function(root) {\n    var Map = {},\n        layers;\n\n    Map = function(el, l, callback) {\n        wax.tilejson(l.api, function(t) {\n            var handlers = [\n                new MM.DragHandler(),\n                new MM.DoubleClickHandler(),\n                new MM.TouchHandler()\n            ];\n            if ($.inArray('zoomwheel', l.features) >= 0) {\n                handlers.push(new MM.MouseWheelHandler());\n            }\n\n            MM_map = new MM.Map(el, new wax.mm.connector(t), null, handlers);\n            MM_map.setCenterZoom({\n                lat: (l.center) ? l.center.lat : t.center[1],\n                lon: (l.center) ? l.center.lon : t.center[0]\n            }, (l.center) ? l.center.zoom : t.center[2]);\n\n            if (l.zoomRange) {\n                MM_map.setZoomRange(l.zoomRange[0], l.zoomRange[1]);\n            } else {\n                MM_map.setZoomRange(t.minzoom, t.maxzoom);\n            }\n\n            wax.mm.attribution(MM_map, t).appendTo(MM_map.parent);\n\n            for (var i = 0; i < l.features.length; i++) {\n                switch(l.features[i]) {\n                    case 'zoompan':\n                        wax.mm.zoomer(MM_map).appendTo(MM_map.parent);\n                        break;\n                    case 'zoombox':\n                        wax.mm.zoombox(MM_map);\n                        break;\n                    case 'legend':\n                        MM_map.legend = wax.mm.legend(MM_map, t).appendTo(MM_map.parent);\n                        break;\n                    case 'bwdetect':\n                        wax.mm.bwdetect(MM_map);\n                        break;\n                    case 'share':\n                        wax.mm.share(MM_map, t).appendTo($('body')[0]);\n                        break;\n                    case 'tooltips':\n                        MM_map.interaction = wax.mm.interaction()\n                            .map(MM_map)\n                            .tilejson(t)\n                            .on(wax.tooltip()\n                                .parent(MM_map.parent)\n                                .events()\n                            );\n                        break;\n                    case 'movetips':\n                        MM_map.interaction = wax.mm.interaction()\n                            .map(MM_map)\n                            .tilejson(t)\n                            .on(wax.movetip()\n                                .parent(MM_map.parent)\n                                .events()\n                            );\n                        break;\n                }\n            }\n            if (callback && typeof(callback) == 'function') callback();\n        });\n        return Map;\n    };\n\n    Map.layers = function(x) {\n        if (!arguments.length) return layers;\n        layers = x;\n        return Map;\n    };\n\n    Map.setOverlay = function(id) {\n\n        if (!layers[id]) throw new Error('overlay with id ' + id + ' not found');\n        var l = layers[id];\n\n        wax.tilejson(l.api, function(t) {\n            var level = (l.level === 'base') ? 0 : 1;\n            \n            try {\n                MM_map.setLayerAt(level, new wax.mm.connector(t));\n            } catch (e) {\n                MM_map.insertLayerAt(level, new wax.mm.connector(t));\n            }\n            if (MM_map.interaction) MM_map.interaction.map(MM_map).tilejson(t);\n            if (MM_map.legend) {\n                MM_map.legend.content(t);\n            }\n        });\n\n        if (l.center) {\n            var lat = l.center.lat || MM_map.getCenter().lat,\n                lon = l.center.lon || MM_map.getCenter().lon,\n                zoom = l.center.zoom || MM_map.getZoom();\n\n            if (l.center.ease > 0) {\n                MM_map.easey = easey().map(MM_map)\n                    .to(MM_map.locationCoordinate({ lat: lat, lon: lon })\n                    .zoomTo(zoom)).run(l.center.ease);\n            } else {\n                MM_map.setCenterZoom({ lat: lat, lon: lon }, zoom);\n            }\n        }\n    };\n\n    Map.removeOverlay = function(id) {\n\n        if (!layers[id]) throw new Error('overlay with id ' + id + ' not found');\n        var l = layers[id];\n\n        var level = (l.level === 'base') ? 0 : 1;\n        MM_map.removeLayerAt(level);\n        if (MM_map.legend) MM_map.legend.content(' ');\n        if (MM_map.interaction) MM_map.interaction.remove();\n    };\n\n    root.Map = Map;\n\n})(this);\n\n// Bind the geocoder functionality to any div with the format\n//\n//     <div data-control='geocode' id=\"search\">\n//        <form class=\"geocode\">\n//          <input placeholder='Search for an address' type=\"text\">\n//          <input type='submit' />\n//          <div id='geocode-error'></div>\n//        </form>\n//      </div>\n//\nfunction bindGeocoder() {\n    $('[data-control=\"geocode\"] form').submit(function(e) {\n        var m = $('[data-control=\"geocode\"]').attr('data-map');\n        // If this doesn't explicitly name the layer it should affect,\n        // use the first layer in MB.maps\n        e.preventDefault();\n        geocode($('input[type=text]', this).val(), m);\n    });\n    var geocode = function(query, m) {\n        query = encodeURIComponent(query);\n        $('form.geocode').addClass('loading');\n        reqwest({\n            url: 'http://open.mapquestapi.com/nominatim/v1/search?format=json&json_callback=callback&&limit=1&q=' + query,\n            type: 'jsonp',\n            jsonpCallback: 'callback',\n            success: function (r) {\n                r = r[0];\n\n                if (MM_map.geocodeLayer) {\n                    MM_map.geocodeLayer.removeAllMarkers();\n                }\n\n                $('form.geocode').removeClass('loading');\n\n                if (r === undefined) {\n                    $('#geocode-error').text('This address cannot be found.').fadeIn('fast');\n                } else {\n                    $('#geocode-error').hide();\n                    MM_map.setExtent([\n                        { lat: r.boundingbox[1], lon: r.boundingbox[2] },\n                        { lat: r.boundingbox[0], lon: r.boundingbox[3] }\n                    ]);\n\n                    if (MM_map.getZoom() === MM_map.coordLimits[1].zoom) {\n                        var point = { 'type': 'FeatureCollection',\n                            'features': [{ 'type': 'Feature',\n                            'geometry': { 'type': 'Point','coordinates': [r.lon, r.lat] },\n                            'properties': {}\n                        }]};\n\n                        if (MM_map.geocodeLayer) {\n                            MM_map.geocodeLayer.removeAllMarkers();\n                            MM_map.geocodeLayer.geojson(point);\n                        } else {\n                            MM_map.geocodeLayer = mmg()\n                                .geojson(point);\n                            MM_map.addLayer(MM_map.geocodeLayer);\n                        }\n\n                        MM_map.setCenter({ lat: r.lat, lon: r.lon });\n                    }\n                }\n            }\n        });\n        var attribution = 'Search by <a href=\"http://developer.mapquest.com/web/products/open\">MapQuest Open</a>';\n        if ($('.wax-attribution').html().indexOf(attribution) < 0) {\n            $('.wax-attribution').append(' - ' + attribution);\n        }\n    };\n}\n\n$(function() {\n    if (location.hash === '#embed') $('body').removeClass().addClass('embed');\n\n    $('body').on('click.map', '[data-control=\"layer\"]', function(e) {\n        var $this = $(this),\n            id = $this.attr('href');\n        id = id.replace(/.*(?=#[^\\s]+$)/, '').slice(1);\n        var m = $('[data-control=\"geocode\"]').attr('data-map') || 'main';\n        e.preventDefault();\n        if($this.hasClass('active')) {\n            $('[data-control=\"layer\"]').removeClass('active');\n            window[m].removeOverlay(id);        \n        } else {\n            $('[data-control=\"layer\"]').removeClass('active');\n            $this.addClass('active');\n            window[m].setOverlay(id);\n        }\n    });\n\n    bindGeocoder();\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":7978}]],"length":7978}
{"contributors":[],"silentsave":false,"ts":1349485309853,"patch":[[{"diffs":[[0,"            "],[1,"/*"],[0,"case 'share'"]],"start1":1621,"start2":1621,"length1":24,"length2":26},{"diffs":[[0,"          break;"],[1,"*/"],[0,"\n               "]],"start1":1735,"start2":1735,"length1":32,"length2":34}]],"length":7982,"saved":false}
